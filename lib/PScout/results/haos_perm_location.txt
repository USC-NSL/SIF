<com.android.server.LocationManagerService: void checkMockPermissionsSafe()> (8)
<com.android.server.LocationManagerService: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<com.android.server.LocationManagerService: void clearTestProviderEnabled(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: void clearTestProviderStatus(java.lang.String)> (2)
<com.android.server.LocationManagerService: void removeTestProvider(java.lang.String)> (2)
<com.android.server.LocationManagerService: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<com.android.server.LocationManagerService: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<com.android.server.LocationManagerService: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub$Proxy: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.ILocationManager$Stub: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void clearTestProviderStatus(java.lang.String)> ()
<android.location.ILocationManager$Stub: void clearTestProviderStatus(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void removeTestProvider(java.lang.String)> ()
<android.location.ILocationManager$Stub: void removeTestProvider(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.ILocationManager$Stub: void setTestProviderEnabled(java.lang.String,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.ILocationManager$Stub: void setTestProviderLocation(java.lang.String,android.location.Location)> (2)
<android.location.ILocationManager$Stub$Proxy: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<android.location.ILocationManager$Stub: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (2)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> (1)
<android.location.ILocationManager: void clearTestProviderEnabled(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderLocation(java.lang.String)> (1)
<android.location.ILocationManager: void clearTestProviderStatus(java.lang.String)> (1)
<android.location.ILocationManager: void removeTestProvider(java.lang.String)> (1)
<android.location.ILocationManager: void setTestProviderEnabled(java.lang.String,boolean)> (1)
<android.location.ILocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> (1)
<android.location.ILocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> (1)
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)> ()
<android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderLocation(java.lang.String)> ()
<android.location.LocationManager: void clearTestProviderStatus(java.lang.String)> ()
<android.location.LocationManager: void removeTestProvider(java.lang.String)> ()
<android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)> ()
<android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)> ()
<android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)> ()
<com.android.server.LocationManagerService: java.lang.String checkPermissionsSafe(java.lang.String,java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)> (5)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (4)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.LocationManager: void recordLocation(boolean)> (7)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (1)
<com.android.camera.Camera: void onPause()> (3)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoCamera: void onPause()> (3)
<com.android.camera.VideoCamera: void onResume()> (3)
<com.android.camera.VideoCamera: void onSharedPreferenceChanged()> (3)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$1300(com.android.camera.Camera)> (2)
<com.android.camera.Camera: void onResume()> (3)
<com.android.camera.ActivityBase: void onPause()> (5)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (7)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera: void restorePreferences()> (1)
<com.android.camera.ActivityBase: void onResume()> (5)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (7)
<com.android.camera.VideoCamera: void onCancelBgTraining(android.view.View)> ()
<com.android.camera.VideoCamera: void restorePreferences()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.camera.PanoramaActivity: void onPause()> (3)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.CropImage: void onPause()> (2)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.camera.ui.IndicatorControl: void onSettingChanged()> (8)
<com.android.camera.Camera: void access$4300(com.android.camera.Camera)> (1)
<com.android.camera.PanoramaActivity: void onResume()> (3)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.CropImage: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.VideoCamera: void access$2100(com.android.camera.VideoCamera)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (16)
<com.android.camera.ui.IndicatorButton$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlBarContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlBar: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlWheelContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlWheel: void onSettingChanged()> (1)
<com.android.camera.ui.OtherSettingsPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.SecondLevelIndicatorControlBar: void onSettingChanged()> (1)
<com.android.camera.Camera$4: void run()> (1)
<com.android.camera.VideoCamera$3: void run()> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (1)
<com.android.gallery3d.data.MtpDeviceSet: long reload()> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.camera.ui.IndicatorButton: void onSettingChanged()> (2)
<com.android.camera.ui.OtherSettingsPopup: void onSettingChanged()> (1)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (1)
<com.android.camera.ui.BasicSettingPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.EffectSettingPopup$Listener: void onSettingChanged()> (2)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged()> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.camera.ui.BasicSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.EffectSettingPopup: void onClick(android.view.View)> (1)
<com.android.camera.ui.EffectSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (3)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.camera.ui.InLineSettingKnob: boolean changeIndex(int)> (4)
<com.android.camera.ui.InLineSettingRestore: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingSwitch: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (10)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.camera.ui.InLineSettingKnob$1: void run()> (1)
<com.android.camera.ui.InLineSettingKnob$2: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingKnob$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingSwitch$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (6)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (8)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (3)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (8)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$2: void onLoadingFinished()> (2)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.camera.ActivityBase: void createCameraScreenNail(boolean)> (3)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void startDefaultPage()> (2)
<com.android.gallery3d.app.Gallery: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.ui.ImportCompleteListener: void goToImportedAlbum()> (1)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (2)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (9)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (1)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1600(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1600(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished()> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished()> (2)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1000(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.camera.Camera: void createCameraScreenNail(boolean)> (2)
<com.android.camera.PanoramaActivity: void createCameraScreenNail(boolean)> (2)
<com.android.camera.VideoCamera: void createCameraScreenNail(boolean)> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (5)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$4: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.Gallery: void initializeByIntent()> (1)
<com.android.gallery3d.ui.ImportCompleteListener: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (1)
<com.android.gallery3d.app.CropImage$LoadBitmapDataTask: android.graphics.Bitmap run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.CropImage$LoadDataTask: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (7)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (6)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished()> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$6: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.camera.Camera: void onCreate(android.os.Bundle)> (3)
<com.android.camera.PanoramaActivity: void onCreate(android.os.Bundle)> (3)
<com.android.camera.VideoCamera: void onCreate(android.os.Bundle)> (3)
<com.android.camera.ActivityBase: void onCreate(android.os.Bundle)> (5)
<com.android.gallery3d.app.CropImage: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.app.CropImage$LoadBitmapDataTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.CropImage$LoadDataTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (10)
<com.android.camera.ActivityBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.camera.Camera: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.PanoramaActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.VideoCamera: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.Gallery: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.camera.ActivityBase: void onBackPressed()> (5)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.Gallery: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (1)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1700(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (19)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.Camera: void onBackPressed()> (2)
<com.android.camera.PanoramaActivity: void onBackPressed()> (2)
<com.android.camera.VideoCamera: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$700(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (16)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (17)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (15)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (15)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (5)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (4)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(android.location.Criteria,boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (4)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.server.LocationManagerService: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean addGpsStatusListener(android.location.IGpsStatusListener)> ()
<android.location.ILocationManager$Stub: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.ILocationManager: boolean addGpsStatusListener(android.location.IGpsStatusListener)> (2)
<android.location.LocationManager: boolean addGpsStatusListener(android.location.GpsStatus$Listener)> ()
<android.location.LocationManager: boolean addNmeaListener(android.location.GpsStatus$NmeaListener)> ()
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> ()
<com.android.server.LocationManagerService: java.lang.String checkPermissionsSafe(java.lang.String,java.lang.String)> (5)
<com.android.server.LocationManagerService: android.location.Location _getLastKnownLocationLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: android.os.Bundle _getProviderInfoLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean _isProviderEnabledLocked(java.lang.String)> (1)
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesLocked(java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver)> (3)
<com.android.server.LocationManagerService: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<com.android.server.LocationManagerService: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<com.android.server.LocationManagerService: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<com.android.server.LocationManagerService: void addProximityAlertLocked(double,double,float,long,android.app.PendingIntent)> (1)
<com.android.server.LocationManagerService: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<com.android.server.LocationManagerService: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: android.location.Location getLastKnownLocation(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.location.Location getLastKnownLocation(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: android.os.Bundle getProviderInfo(java.lang.String)> ()
<android.location.ILocationManager$Stub: android.os.Bundle getProviderInfo(java.lang.String)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean isProviderEnabled(java.lang.String)> ()
<android.location.ILocationManager$Stub: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.LocationManagerService: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (2)
<android.location.ILocationManager$Stub$Proxy: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (2)
<android.location.ILocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (1)
<android.location.ILocationManager: android.os.Bundle getProviderInfo(java.lang.String)> (1)
<android.location.ILocationManager: boolean isProviderEnabled(java.lang.String)> (1)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.ILocationManager$Stub$Proxy: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.ILocationManager$Stub: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (2)
<android.location.ILocationManager: void requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.ILocationListener)> (1)
<android.location.ILocationManager: void requestLocationUpdatesPI(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (1)
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> (4)
<android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)> ()
<android.location.LocationManager: boolean isProviderEnabled(java.lang.String)> (2)
<android.location.ILocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> (1)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.location.LocationListener,android.os.Looper)> (5)
<android.location.LocationManager: void _requestLocationUpdates(java.lang.String,android.location.Criteria,long,float,boolean,android.app.PendingIntent)> (4)
<com.android.gallery3d.util.ReverseGeocoder: java.lang.String computeAddress(com.android.gallery3d.util.ReverseGeocoder$SetLatLong)> (1)
<com.android.server.location.LocationBasedCountryDetector: android.location.Location getLastKnownLocation()> (2)
<com.android.server.UiModeManagerService$8: void retrieveLocation()> (2)
<com.android.wallpaper.grass.GrassRS: void updateLocation()> (2)
<com.android.server.UiModeManagerService: void systemReady()> (1)
<android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)> (6)
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)> ()
<android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)> ()
<android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)> ()
<com.android.gallery3d.data.LocationClustering: java.lang.String generateName(java.util.ArrayList,com.android.gallery3d.util.ReverseGeocoder)> (1)
<com.android.server.location.LocationBasedCountryDetector$2: void run()> ()
<com.android.server.location.LocationBasedCountryDetector: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS: void access$300(com.android.wallpaper.grass.GrassRS)> (1)
<com.android.wallpaper.grass.GrassRS: void start()> (2)
<com.android.server.ServerThread$1: void run()> (1)
<android.webkit.GeolocationService: void registerForLocationUpdates()> (2)
<com.android.camera.LocationManager: void startReceivingLocationUpdates()> (1)
<com.android.server.location.LocationBasedCountryDetector: void registerListener(java.lang.String,android.location.LocationListener)> (1)
<com.android.gallery3d.data.LocationClustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.CountryDetectorBase: android.location.Country detectCountry()> (1)
<com.android.wallpaper.grass.GrassRS$TimezoneTracker: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.wallpaper.grass.GrassView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptScene: void start()> (6)
<android.webkit.GeolocationService: boolean start()> ()
<android.webkit.GeolocationService: void setEnableGps(boolean)> ()
<com.android.camera.LocationManager: void recordLocation(boolean)> (7)
<com.android.gallery3d.data.Clustering: void run(com.android.gallery3d.data.MediaSet)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void startLocationBasedDetector(android.location.CountryListener)> (1)
<com.android.wallpaper.fall.FallRS: void start()> (2)
<com.android.wallpaper.galaxy.GalaxyRS: void start()> (2)
<com.android.wallpaper.nexus.NexusRS: void start()> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.RenderScriptWallpaper$RenderScriptEngine: void onVisibilityChanged(boolean)> (1)
<com.android.camera.Camera: void initializeFirstTime()> (1)
<com.android.camera.Camera: void initializeSecondTime()> (1)
<com.android.camera.Camera: void onPause()> (3)
<com.android.camera.Camera: void onSharedPreferenceChanged()> (2)
<com.android.camera.VideoCamera: void onPause()> (3)
<com.android.camera.VideoCamera: void onResume()> (3)
<com.android.camera.VideoCamera: void onSharedPreferenceChanged()> (3)
<com.android.gallery3d.data.ClusterAlbumSet: void updateClusters()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetection(android.location.Country,android.location.Country,boolean,boolean)> (1)
<com.android.wallpaper.fall.FallView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.wallpaper.galaxy.GalaxyView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)> (1)
<com.android.camera.Camera: void access$1300(com.android.camera.Camera)> (2)
<com.android.camera.Camera: void onResume()> (3)
<com.android.camera.ActivityBase: void onPause()> (5)
<com.android.gallery3d.app.AbstractGalleryActivity: void onPause()> (7)
<com.android.camera.CameraPreference$OnPreferenceChangedListener: void onSharedPreferenceChanged()> (1)
<com.android.camera.Camera: void restorePreferences()> (1)
<com.android.camera.ActivityBase: void onResume()> (5)
<com.android.gallery3d.app.AbstractGalleryActivity: void onResume()> (7)
<com.android.camera.VideoCamera: void onCancelBgTraining(android.view.View)> ()
<com.android.camera.VideoCamera: void restorePreferences()> (1)
<com.android.gallery3d.data.ClusterAlbumSet: long reload()> (1)
<com.android.server.location.ComprehensiveCountryDetector$2: void run()> (1)
<com.android.camera.PanoramaActivity: void onPause()> (3)
<com.android.gallery3d.app.AlbumPicker: void onPause()> (3)
<com.android.gallery3d.app.CropImage: void onPause()> (2)
<com.android.gallery3d.app.DialogPicker: void onPause()> (3)
<com.android.gallery3d.app.Gallery: void onPause()> (2)
<com.android.gallery3d.app.PickerActivity: void onPause()> (2)
<com.android.camera.ui.IndicatorControl: void onSettingChanged()> (8)
<com.android.camera.Camera: void access$4300(com.android.camera.Camera)> (1)
<com.android.camera.PanoramaActivity: void onResume()> (3)
<com.android.gallery3d.app.AlbumPicker: void onResume()> (3)
<com.android.gallery3d.app.CropImage: void onResume()> (2)
<com.android.gallery3d.app.DialogPicker: void onResume()> (3)
<com.android.gallery3d.app.Gallery: void onResume()> (2)
<com.android.gallery3d.app.PickerActivity: void onResume()> (2)
<com.android.camera.VideoCamera: void access$2100(com.android.camera.VideoCamera)> (1)
<com.android.gallery3d.data.MediaSet: long reload()> (16)
<com.android.camera.ui.IndicatorButton$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlBarContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlBar: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlWheelContainer: void onSettingChanged()> (1)
<com.android.camera.ui.IndicatorControlWheel: void onSettingChanged()> (1)
<com.android.camera.ui.OtherSettingsPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.SecondLevelIndicatorControlBar: void onSettingChanged()> (1)
<com.android.camera.Camera$4: void run()> (1)
<com.android.camera.VideoCamera$3: void run()> (1)
<com.android.gallery3d.app.AlbumDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.AlbumSetDataLoader$ReloadTask: void run()> (2)
<com.android.gallery3d.app.PhotoDataAdapter$ReloadTask: void run()> (2)
<com.android.gallery3d.app.SlideshowPage$SequentialSource: long reload()> (1)
<com.android.gallery3d.app.SlideshowPage$ShuffleSource: long reload()> (1)
<com.android.gallery3d.data.ClusterAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbum: long reload()> (1)
<com.android.gallery3d.data.ComboAlbumSet: long reload()> (1)
<com.android.gallery3d.data.FilterDeleteSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: long reload()> (1)
<com.android.gallery3d.data.FilterTypeSet: void updateData()> (1)
<com.android.gallery3d.data.LocalAlbumSet: long reload()> (1)
<com.android.gallery3d.data.LocalMergeAlbum: long reload()> (1)
<com.android.gallery3d.data.MtpDeviceSet: long reload()> (1)
<com.android.gallery3d.gadget.MediaSetSource: void reload()> (1)
<com.android.camera.ui.IndicatorButton: void onSettingChanged()> (2)
<com.android.camera.ui.OtherSettingsPopup: void onSettingChanged()> (1)
<com.android.gallery3d.app.AlbumDataLoader: void resume()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: void resume()> (2)
<com.android.gallery3d.app.PhotoDataAdapter: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$SlideshowSource: long reload()> (1)
<com.android.gallery3d.gadget.WidgetSource: void reload()> (1)
<com.android.camera.ui.BasicSettingPopup$Listener: void onSettingChanged()> (1)
<com.android.camera.ui.EffectSettingPopup$Listener: void onSettingChanged()> (2)
<com.android.camera.ui.InLineSettingItem$Listener: void onSettingChanged()> (1)
<com.android.gallery3d.app.AlbumPage: void onResume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void onResume()> (1)
<com.android.gallery3d.app.ManageCachePage: void onResume()> (1)
<com.android.gallery3d.app.PhotoPage$Model: void resume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem loadItem()> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: void onDataSetChanged()> (1)
<com.android.camera.ui.BasicSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.EffectSettingPopup: void onClick(android.view.View)> (1)
<com.android.camera.ui.EffectSettingPopup: void onItemClick(android.widget.AdapterView,android.view.View,int,long)> (1)
<com.android.camera.ui.InLineSettingItem: boolean changeIndex(int)> (3)
<com.android.gallery3d.app.ActivityState: void onResume()> (6)
<com.android.gallery3d.app.PhotoPage: void onResume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter: com.android.gallery3d.data.MediaItem access$500(com.android.gallery3d.app.SlideshowDataAdapter)> (1)
<com.android.camera.ui.InLineSettingKnob: boolean changeIndex(int)> (4)
<com.android.camera.ui.InLineSettingRestore: boolean changeIndex(int)> (1)
<com.android.camera.ui.InLineSettingSwitch: boolean changeIndex(int)> (2)
<com.android.gallery3d.app.ActivityState: void resume()> (10)
<com.android.gallery3d.app.SlideshowPage: void onResume()> (1)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.camera.ui.InLineSettingKnob$1: void run()> (1)
<com.android.camera.ui.InLineSettingKnob$2: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingKnob$3: boolean onTouch(android.view.View,android.view.MotionEvent)> (1)
<com.android.camera.ui.InLineSettingSwitch$1: void onCheckedChanged(android.widget.CompoundButton,boolean)> (1)
<com.android.gallery3d.app.AlbumPage: void resume()> (1)
<com.android.gallery3d.app.AlbumSetPage: void resume()> (1)
<com.android.gallery3d.app.ManageCachePage: void resume()> (1)
<com.android.gallery3d.app.PhotoPage: void resume()> (1)
<com.android.gallery3d.app.SlideshowPage: void resume()> (1)
<com.android.gallery3d.app.StateManager: void finishState(com.android.gallery3d.app.ActivityState)> (6)
<com.android.gallery3d.app.StateManager: void resume()> (1)
<com.android.gallery3d.app.StateManager: void startStateForResult(java.lang.Class,int,android.os.Bundle)> (5)
<com.android.gallery3d.app.StateManager: void startState(java.lang.Class,android.os.Bundle)> (8)
<com.android.gallery3d.app.StateManager: void switchState(com.android.gallery3d.app.ActivityState,java.lang.Class,android.os.Bundle)> (3)
<com.android.gallery3d.app.SlideshowDataAdapter$ReloadTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.ActivityState: void onBackPressed()> (8)
<com.android.gallery3d.app.AlbumPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.AlbumPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void clearLoadingBit(int)> (2)
<com.android.gallery3d.app.PhotoPage$2: void onLoadingFinished()> (2)
<com.android.gallery3d.app.SlideshowPage: void showPendingBitmap()> (2)
<com.android.gallery3d.app.AlbumPage: void doCluster(int)> (1)
<com.android.gallery3d.app.AlbumPage: void pickPhoto(int)> (1)
<com.android.gallery3d.app.AlbumSetPage: void pickAlbum(int)> (1)
<com.android.gallery3d.app.PhotoPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.camera.ActivityBase: void createCameraScreenNail(boolean)> (3)
<com.android.gallery3d.app.AlbumPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.AlbumSetPage: boolean onItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.DialogPicker: void onCreate(android.os.Bundle)> (3)
<com.android.gallery3d.app.Gallery: void startDefaultPage()> (2)
<com.android.gallery3d.app.Gallery: void startGetContent(android.content.Intent)> (1)
<com.android.gallery3d.app.Gallery: void startViewAction(android.content.Intent)> (1)
<com.android.gallery3d.ui.ImportCompleteListener: void goToImportedAlbum()> (1)
<com.android.gallery3d.app.AlbumPage: void onUpPressed()> (2)
<com.android.gallery3d.app.AlbumSetPage: void doCluster(int)> (1)
<com.android.gallery3d.app.PhotoPage: void onUpPressed()> (2)
<com.android.gallery3d.util.ThreadPool$Job: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (9)
<com.android.gallery3d.app.AlbumSetPage: void onBackPressed()> (1)
<com.android.gallery3d.app.ManageCachePage: void onBackPressed()> (3)
<com.android.gallery3d.app.PhotoPage: void onBackPressed()> (1)
<com.android.gallery3d.app.SlideshowPage: void onBackPressed()> (2)
<com.android.gallery3d.app.StateManager: boolean itemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.StateManager: void onBackPressed()> (1)
<com.android.gallery3d.app.ActivityState: boolean onItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.AlbumPage$5: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.AlbumPage: void access$1600(com.android.gallery3d.app.AlbumPage,int)> (2)
<com.android.gallery3d.app.AlbumPage: void onPause()> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1600(com.android.gallery3d.app.AlbumSetPage,int)> (2)
<com.android.gallery3d.app.AlbumSetPage: void onPause()> (1)
<com.android.gallery3d.app.LoadingListener: void onLoadingFinished()> (5)
<com.android.gallery3d.app.PhotoDataAdapter$DataListener: void onLoadingFinished()> (2)
<com.android.gallery3d.app.SlideshowPage: void access$100(com.android.gallery3d.app.SlideshowPage)> (1)
<com.android.gallery3d.app.GalleryActionBar$ClusterRunner: void doCluster(int)> (2)
<com.android.gallery3d.app.AlbumPage: void access$900(com.android.gallery3d.app.AlbumPage,int)> (1)
<com.android.gallery3d.app.AlbumSetPage: void access$1000(com.android.gallery3d.app.AlbumSetPage,int)> (1)
<com.android.camera.Camera: void createCameraScreenNail(boolean)> (2)
<com.android.camera.PanoramaActivity: void createCameraScreenNail(boolean)> (2)
<com.android.camera.VideoCamera: void createCameraScreenNail(boolean)> (2)
<com.android.gallery3d.app.AbstractGalleryActivity: void onCreate(android.os.Bundle)> (5)
<com.android.gallery3d.app.PickerActivity: void onCreate(android.os.Bundle)> (4)
<com.android.gallery3d.app.AlbumSetPage$4: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.Gallery: void initializeByIntent()> (1)
<com.android.gallery3d.ui.ImportCompleteListener: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.AlbumPage: void onBackPressed()> (1)
<com.android.gallery3d.app.CropImage$LoadBitmapDataTask: android.graphics.Bitmap run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.CropImage$LoadDataTask: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: android.graphics.BitmapRegionDecoder run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: com.android.gallery3d.ui.ScreenNail run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.WidgetUtils: android.graphics.Bitmap createWidgetBitmap(com.android.gallery3d.data.MediaItem)> (2)
<com.android.gallery3d.ui.AlbumSetSlidingWindow: com.android.gallery3d.ui.BitmapTexture getLoadingTexture()> ()
<com.android.gallery3d.util.JobLimiter$JobWrapper: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.util.ThreadPool$Worker: void run()> (1)
<com.android.gallery3d.app.ManageCachePage: void onClick(android.view.View)> (1)
<com.android.gallery3d.app.ManageCachePage: void onProgressComplete(int)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AbstractGalleryActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (7)
<com.android.gallery3d.app.AbstractGalleryActivity: void onBackPressed()> (6)
<com.android.gallery3d.app.ManageCachePage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.app.SlideshowPage: boolean onItemSelected(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.ActionModeHandler$ActionModeListener: boolean onActionItemClicked(android.view.MenuItem)> (1)
<com.android.gallery3d.app.AlbumPage$7: void run()> (1)
<com.android.gallery3d.app.AlbumPage$MyLoadingListener: void onLoadingFinished()> (1)
<com.android.gallery3d.app.ActivityState: void onPause()> (10)
<com.android.gallery3d.app.AlbumSetPage$6: void run()> (1)
<com.android.gallery3d.app.AlbumSetPage$MyLoadingListener: void onLoadingFinished()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object executeAndWait(java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.GalleryActionBar$1: void onClick(android.content.DialogInterface,int)> (1)
<com.android.gallery3d.app.GalleryActionBar: boolean onNavigationItemSelected(int,long)> (1)
<com.android.camera.Camera: void onCreate(android.os.Bundle)> (3)
<com.android.camera.PanoramaActivity: void onCreate(android.os.Bundle)> (3)
<com.android.camera.VideoCamera: void onCreate(android.os.Bundle)> (3)
<com.android.camera.ActivityBase: void onCreate(android.os.Bundle)> (5)
<com.android.gallery3d.app.CropImage: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.app.Gallery: void onCreate(android.os.Bundle)> (2)
<com.android.gallery3d.ui.MenuExecutor$ProgressListener: void onProgressComplete(int)> (2)
<com.android.gallery3d.app.CropImage$LoadBitmapDataTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.CropImage$LoadDataTask: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$FullImageJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.PhotoDataAdapter$ScreenNailJob: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.gadget.LocalPhotoSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.gadget.MediaSetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.ui.GLView: boolean onTouch(android.view.MotionEvent)> (10)
<com.android.camera.ActivityBase: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.camera.Camera: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.PanoramaActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.VideoCamera: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.Gallery: boolean onOptionsItemSelected(android.view.MenuItem)> (2)
<com.android.gallery3d.app.PickerActivity: boolean onOptionsItemSelected(android.view.MenuItem)> (4)
<com.android.camera.ActivityBase: void onBackPressed()> (5)
<com.android.gallery3d.app.AlbumPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.DialogPicker: void onBackPressed()> (3)
<com.android.gallery3d.app.Gallery: void onBackPressed()> (2)
<com.android.gallery3d.app.PickerActivity: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)> (2)
<com.android.gallery3d.app.ManageCachePage: void onPause()> (1)
<com.android.gallery3d.app.PhotoPage: void onPause()> (1)
<com.android.gallery3d.app.SlideshowPage: void onPause()> (1)
<com.android.gallery3d.app.StateManager: void pause()> (1)
<com.android.gallery3d.app.AlbumSetDataLoader: java.lang.Object access$1900(com.android.gallery3d.app.AlbumSetDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.PhotoDataAdapter: java.lang.Object access$2500(com.android.gallery3d.app.PhotoDataAdapter,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.app.AlbumDataLoader: java.lang.Object access$1700(com.android.gallery3d.app.AlbumDataLoader,java.util.concurrent.Callable)> (1)
<com.android.gallery3d.ui.MenuExecutor: void onProgressComplete(int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.gadget.WidgetSource: android.graphics.Bitmap getImage(int)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent)> (19)
<com.android.gallery3d.ui.ScrollBarView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean onTouch(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.gallery3d.app.DialogPicker: boolean onOptionsItemSelected(android.view.MenuItem)> (3)
<com.android.camera.Camera: void onBackPressed()> (2)
<com.android.camera.PanoramaActivity: void onBackPressed()> (2)
<com.android.camera.VideoCamera: void onBackPressed()> (2)
<com.android.gallery3d.ui.ActionModeHandler$1: boolean onMenuItemClick(android.view.MenuItem)> (1)
<com.android.gallery3d.ui.MenuExecutor: void access$700(com.android.gallery3d.ui.MenuExecutor,int,com.android.gallery3d.ui.MenuExecutor$ProgressListener)> (1)
<com.android.gallery3d.gadget.WidgetService$PhotoRVFactory: android.widget.RemoteViews getViewAt(int)> (1)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.GLRootView: boolean dispatchTouchEvent(android.view.MotionEvent)> (3)
<com.android.gallery3d.ui.GLRootView: void setContentPane(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (16)
<com.android.gallery3d.ui.GLView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (17)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Void run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.ui.GLRoot: void setContentPane(com.android.gallery3d.ui.GLView)> (3)
<com.android.gallery3d.app.AlbumPage$2: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.EdgeView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.PhotoView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.SlotView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.TileImageView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean dispatchTouchEvent(android.view.MotionEvent,int,int,com.android.gallery3d.ui.GLView,boolean)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.GLView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (15)
<com.android.gallery3d.ui.GLView: void removeAllComponents()> (15)
<com.android.gallery3d.ui.PhotoView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: void removeOneComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.MenuExecutor$MediaOperation: java.lang.Object run(com.android.gallery3d.util.ThreadPool$JobContext)> (1)
<com.android.gallery3d.app.ActivityState: void setContentPane(com.android.gallery3d.ui.GLView)> (5)
<com.android.gallery3d.app.AlbumPage$2: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumSetPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.ManageCachePage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.PhotoPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.SlideshowPage$1: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.EdgeView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.PhotoView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.ScrollBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlideshowView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.SlotView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.TileImageView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.ui.UndoBarView: boolean removeComponent(com.android.gallery3d.ui.GLView)> (1)
<com.android.gallery3d.app.AlbumPage$2: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumSetPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.ManageCachePage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.PhotoPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.app.SlideshowPage$1: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView$FaceHighlightView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView$HighlightRectangle: void removeAllComponents()> (1)
<com.android.gallery3d.ui.CropView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.EdgeView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.PhotoView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.ScrollBarView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlideshowView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.SlotView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.TileImageView: void removeAllComponents()> (1)
<com.android.gallery3d.ui.UndoBarView: void removeAllComponents()> (1)
<com.android.gallery3d.app.AlbumPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.AlbumSetPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.ManageCachePage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.PhotoPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SlideshowPage: void setContentPane(com.android.gallery3d.ui.GLView)> (2)
<com.android.gallery3d.app.SlideshowPage: void initializeViews()> (1)
<com.android.gallery3d.app.SlideshowPage: void onCreate(android.os.Bundle,android.os.Bundle)> (1)
<com.android.gallery3d.app.ActivityState: void onCreate(android.os.Bundle,android.os.Bundle)> (4)
<com.android.gallery3d.app.StateManager: void restoreFromState(android.os.Bundle)> (1)
<com.android.server.LocationManagerService: boolean isAllowedProviderSafe(java.lang.String)> (2)
<com.android.server.LocationManagerService: java.util.List _getProvidersLocked(android.location.Criteria,boolean)> (1)
<com.android.server.LocationManagerService: java.util.List getProviders(android.location.Criteria,boolean)> (3)
<android.location.ILocationManager$Stub$Proxy: java.util.List getProviders(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<com.android.server.LocationManagerService: java.lang.String getBestProvider(android.location.Criteria,boolean)> (4)
<android.location.ILocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (2)
<android.location.ILocationManager$Stub$Proxy: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<android.location.ILocationManager$Stub: java.lang.String getBestProvider(android.location.Criteria,boolean)> (2)
<android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)> (1)
<android.location.LocationManager: java.util.List getProviders(boolean)> (1)
<android.location.ILocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> (1)
<com.android.server.location.LocationBasedCountryDetector: java.util.List getEnabledProviders()> (1)
<android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)> ()
<com.android.server.TelephonyRegistry: void checkListenerPermission(int)> (1)
<com.android.server.TelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> ()
<com.android.internal.telephony.ITelephonyRegistry$Stub: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (2)
<com.android.internal.telephony.ITelephonyRegistry$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.internal.telephony.ITelephonyRegistry: void listen(java.lang.String,com.android.internal.telephony.IPhoneStateListener,int,boolean)> (1)
<com.android.server.TelephonyRegistry: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)> (15)
<android.media.AudioService: void <init>(android.content.Context)> (1)
<com.android.contacts.dialpad.DialpadFragment: void onPause()> (1)
<com.android.contacts.dialpad.DialpadFragment: void onResume()> (1)
<com.android.deskclock.AlarmKlaxon: void onCreate()> (1)
<com.android.deskclock.AlarmKlaxon: void onDestroy()> (1)
<com.android.internal.policy.impl.GlobalActions: void <init>(android.content.Context,android.view.WindowManagerPolicy$WindowManagerFuncs)> (1)
<com.android.phone.CallNotifier: void <init>(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.phone.OtaStartupReceiver: void onReceive(android.content.Context,android.content.Intent)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void addPhoneStateListener()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void removePhoneStateListener()> (2)
<com.android.settings.deviceinfo.Status: void onPause()> (3)
<com.android.settings.deviceinfo.Status: void onResume()> (3)
<com.android.settings.RadioInfo: void onPause()> (1)
<com.android.settings.RadioInfo: void onResume()> (1)
<com.android.systemui.statusbar.policy.NetworkController: void <init>(android.content.Context)> (2)
<com.android.server.ServerThread: void run()> (1)
<com.android.internal.policy.impl.PhoneWindowManager: void showGlobalActionsDialog()> (1)
<com.android.phone.CallNotifier: com.android.phone.CallNotifier init(com.android.phone.PhoneApp,com.android.internal.telephony.Phone,com.android.phone.Ringer,com.android.phone.BluetoothHandsfree,com.android.phone.CallLogAsync)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.ComprehensiveCountryDetector: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: com.android.systemui.statusbar.phone.PhoneStatusBarView makeStatusBarView()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: android.view.View makeStatusBarView()> (1)
<com.android.internal.policy.impl.PhoneWindowManager$2: void run()> (1)
<com.android.phone.PhoneApp: void onCreate()> (1)
<com.android.server.CountryDetectorService$2: void run()> (1)
<com.android.server.location.CountryDetectorBase: void setCountryListener(android.location.CountryListener)> (2)
<com.android.server.location.CountryDetectorBase: void stop()> (1)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void addStatusBarWindow()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void addStatusBarWindow()> (1)
<com.android.server.location.LocationBasedCountryDetector: void setCountryListener(android.location.CountryListener)> (1)
<com.android.server.location.ComprehensiveCountryDetector: void stopLocationBasedDetector()> (4)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void createAndAddWindows()> (1)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void createAndAddWindows()> (1)
<com.android.server.location.ComprehensiveCountryDetector: void access$200(com.android.server.location.ComprehensiveCountryDetector)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void createAndAddWindows()> (1)
<com.android.server.location.ComprehensiveCountryDetector$1: void onCountryDetected(android.location.Country)> (1)
<com.android.systemui.statusbar.BaseStatusBar: void start()> (3)
<com.android.systemui.statusbar.phone.PhoneStatusBar: void start()> (2)
<com.android.systemui.statusbar.tablet.TabletStatusBar: void start()> (2)
<com.android.systemui.SystemUI: void start()> (1)
<com.android.systemui.SystemUIService: void onCreate()> (1)
<com.android.phone.PhoneInterfaceManager: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.Bundle getCellLocation()> ()
<com.android.internal.telephony.ITelephony$Stub: android.os.Bundle getCellLocation()> (2)
<com.android.internal.telephony.ITelephony: android.os.Bundle getCellLocation()> (1)
<com.android.internal.telephony.ITelephony$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()> (2)
<com.android.phone.PhoneInterfaceManager: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<com.android.server.location.GpsLocationProvider: void requestRefLocation(int)> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getNeighboringCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getNeighboringCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getNeighboringCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getNeighboringCellInfo()> ()
<com.android.phone.PhoneInterfaceManager: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony$Stub$Proxy: java.util.List getAllCellInfo()> ()
<com.android.internal.telephony.ITelephony$Stub: java.util.List getAllCellInfo()> (2)
<com.android.internal.telephony.ITelephony: java.util.List getAllCellInfo()> (1)
<android.telephony.TelephonyManager: java.util.List getAllCellInfo()> ()
<com.android.server.LocationManagerService: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager$Stub$Proxy: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<android.location.ILocationManager$Stub: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (2)
<android.location.ILocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> (1)
<android.location.ILocationManager$Stub: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
<android.location.LocationManager: boolean sendExtraCommand(java.lang.String,java.lang.String,android.os.Bundle)> ()
<com.android.server.LocationManagerService: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)> (2)
